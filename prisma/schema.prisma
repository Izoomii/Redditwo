generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique @db.Citext
  nickname      String         @unique @db.Citext
  password      String
  name          String?
  avatar        String?
  // premium       Boolean        @default(false)
  posts         Post[]
  interactions  Interaction[]
  ownedSubs     Sub[]
  subscriptions Subscription[]
  comments      Comment[]
  Premium       Premium?
}

model Post {
  id           String        @id @default(cuid())
  title        String        @db.VarChar(255)
  content      String?
  images       String[]
  sub          Sub           @relation(fields: [subName], references: [name], onDelete: Cascade) //probably better to use ID
  subName      String        @db.Citext
  published    Boolean       @default(false)
  edited       Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  author       User?         @relation(fields: [authorName], references: [nickname], onDelete: SetNull) //user's posts cannot be deleted
  authorName   String?       @db.Citext
  Interactions Interaction[]
  comments     Comment[]
}

model Sub {
  id            String         @id @default(cuid())
  owner         User?          @relation(fields: [ownerName], references: [nickname], onDelete: SetNull) //IMPL setting owner to Null is bad
  ownerName     String?        @db.Citext
  name          String         @unique @db.Citext
  description   String?
  image         String?
  posts         Post[]
  subscriptions Subscription[]
}

model Comment {
  id        String   @id @default(cuid())
  owner     User?    @relation(fields: [ownerName], references: [nickname], onDelete: SetNull)
  ownerName String?  @db.Citext
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  edited    Boolean  @default(false)
  content   String
}

model Interaction {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) //user's votes go away when user is deleted
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  voteType  VoteType?
  saved     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([userId, postId])
}

model Subscription {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  sub        Sub      @relation(fields: [subId], references: [id], onDelete: Cascade)
  subId      String
  subscribed Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, subId])
}

model Premium {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  active     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiration DateTime
  renew      Boolean  @default(false)

}

enum VoteType {
  UP
  DOWN
}
