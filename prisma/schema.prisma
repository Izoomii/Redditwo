generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique @db.Citext
  nickname      String         @unique @db.Citext
  password      String
  name          String?
  avatar        String?
  posts         Post[]
  votes         Vote[]
  ownedSubs     Sub[]
  subscriptions Subscription[]
}

model Post {
  id         String   @id @default(cuid())
  title      String   @db.VarChar(255)
  content    String?
  sub        Sub      @relation(fields: [subName], references: [name], onDelete: Cascade) //probably better to use ID
  subName    String   @db.Citext
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User?    @relation(fields: [authorName], references: [nickname], onDelete: SetNull) //user's posts cannot be deleted
  authorName String?  @db.Citext
  votes      Vote[]
}

model Sub {
  id            String         @id @default(cuid())
  owner         User           @relation(fields: [ownerName], references: [nickname]) //IMPL setting owner to Null is bad
  ownerName     String         @db.Citext
  name          String         @unique @db.Citext
  description   String?
  posts         Post[]
  subscriptions Subscription[]
}

model Vote {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) //user's votes go away when user is deleted
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  voteType  VoteType?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([userId, postId])
}

model Subscription {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  sub        Sub      @relation(fields: [subId], references: [id], onDelete: Cascade)
  subId      String
  subscribed Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, subId])
}

enum VoteType {
  UP
  DOWN
}
