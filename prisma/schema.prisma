generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique @db.Citext
  nickname  String  @unique @db.Citext
  password  String
  name      String?
  avatar    String?
  posts     Post[]
  votes     Vote[]
  ownedSubs Sub[]

}

model Post {
  id         String   @id @default(cuid())
  title      String   @db.VarChar(255)
  content    String?
  sub        Sub      @relation(fields: [subName], references: [name])
  subName    String   @db.Citext
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User?    @relation(fields: [authorName], references: [nickname], onDelete: SetNull) //user's posts cannot be deleted
  authorName String?  @db.Citext
  votes      Vote[]
}

model Sub {
  id          String  @id @default(cuid())
  owner       User    @relation(fields: [ownerName], references: [nickname], onDelete: SetNull)
  ownerName   String  @db.Citext
  name        String  @unique @db.Citext
  description String?
  posts       Post[]

}

enum VoteType {
  UP
  DOWN
}

model Vote {
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade) //user's votes go away when user is deleted
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  voteType  VoteType?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([userId, postId])
}
